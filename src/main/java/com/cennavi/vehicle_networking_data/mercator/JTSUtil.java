package com.cennavi.vehicle_networking_data.mercator;


import com.alibaba.fastjson.JSONArray;
import com.vividsolutions.jts.geom.*;
import com.vividsolutions.jts.io.ParseException;
import com.vividsolutions.jts.io.WKTReader;

public class JTSUtil {

	private static GeometryFactory geometryFactory = new GeometryFactory();
	 
//	/**
//     *  两个几何对象是否是重叠的
//     * @return
//     * @throws ParseException
//     */
//    public boolean equalsGeo() throws ParseException{
//        WKTReader reader = new WKTReader( geometryFactory );
//        LineString geometry1 = (LineString) reader.read("LINESTRING(0 0, 2 0, 5 0)");
//        LineString geometry2 = (LineString) reader.read("LINESTRING(5 0, 0 0)");
//        return geometry1.equals(geometry2);//true
//    }
//    
//    /**
//     * 几何对象没有交点(相邻)
//     * @return
//     * @throws ParseException
//     */
//    public boolean disjointGeo() throws ParseException{
//        WKTReader reader = new WKTReader( geometryFactory );
//        LineString geometry1 = (LineString) reader.read("LINESTRING(0 0, 2 0, 5 0)");
//        LineString geometry2 = (LineString) reader.read("LINESTRING(0 1, 0 2)");
//        return geometry1.disjoint(geometry2);
//    }
//    
//    /**
//     * 至少一个公共点(相交)
//     * @return
//     * @throws ParseException
//     */
//    public boolean intersectsGeo() throws ParseException{
//        WKTReader reader = new WKTReader( geometryFactory );
//        LineString geometry1 = (LineString) reader.read("LINESTRING(0 0, 2 0, 5 0)");
//        LineString geometry2 = (LineString) reader.read("LINESTRING(0 0, 0 2)");
//        Geometry interPoint = geometry1.intersection(geometry2);//相交点
//        System.out.println(interPoint.toText());//输出 POINT (0 0)
//        return geometry1.intersects(geometry2);
//    }

    /**
     * 判断以x,y为坐标的点point(x,y)是否在geometry表示的Polygon中
     * @param x
     * @param y
     * @param geometry wkt格式
     * @return
     */
    public static boolean withinGeo(double x,double y,String geometry) throws ParseException {
        Coordinate coord = new Coordinate(x,y);
        Point point = geometryFactory.createPoint( coord );
        WKTReader reader = new WKTReader( geometryFactory );
        Polygon polygon = (Polygon) reader.read(geometry);
        return point.within(polygon);
    }
	
    /**
     * 创建圆
     * @param longitude
     * @param latitude
     * @param radius
     * @return
     */
    public static Polygon createCircle(double longitude, double latitude, double radius) {
		final int SIDES = 32; // 确定边数
		Coordinate coords[] = new Coordinate[SIDES + 1];
		for (int i = 0; i < SIDES; i++) {
			double lat = MercatorProjection.latitudeToMetersY(latitude);
			double lon = MercatorProjection.longitudeToMetersX(longitude);
			double angle = ((double) i / (double) SIDES) * Math.PI * 2.0;
			double dx = Math.cos(angle) * radius;
			double dy = Math.sin(angle) * radius;
			
			double x = lon + dx;
			double y = lat + dy;
			
			double rlon = MercatorProjection.metersXToLongitude(x);
			double rlat = MercatorProjection.metersYToLatitude(y);
			
			coords[i] = new Coordinate(rlon, rlat);
		}
		coords[SIDES] = coords[0];
		//LinearRing ring = geometryFactory.createLinearRing(coords); // 画一个环线
		//Polygon polygon = geometryFactory.createPolygon(ring, null); // 生成一个面
		Polygon polygon = geometryFactory.createPolygon(coords); // 生成一个面
		return polygon;
	}
    
    /**
     * 正方形
     * @param longitude
     * @param latitude
     * @param radius
     * @return
     */
    public static Polygon createRectangle(double longitude, double latitude, double radius) {
		final int SIDES = 4; // 确定边数
		Coordinate coords[] = new Coordinate[SIDES + 1];
		for (int i = 0; i < SIDES; i++) {
			double lat = MercatorProjection.latitudeToMetersY(latitude);
			double lon = MercatorProjection.longitudeToMetersX(longitude);
			double angle = ((double) i / (double) SIDES) * Math.PI * 2.0;
			double dx = Math.cos(angle) * radius;
			double dy = Math.sin(angle) * radius;
			
			double x = lon + dx;
			double y = lat + dy;
			
			double rlon = MercatorProjection.metersXToLongitude(x);
			double rlat = MercatorProjection.metersYToLatitude(y);
			
			coords[i] = new Coordinate(rlon, rlat);
		}
		coords[SIDES] = coords[0];
		//LinearRing ring = geometryFactory.createLinearRing(coords); // 画一个环线
		//Polygon polygon = geometryFactory.createPolygon(ring, null); // 生成一个面
		Polygon polygon = geometryFactory.createPolygon(coords); // 生成一个面
		return polygon;
	}
 
    /**
     * 线
     * @return
     */
    public static LineString createLingString(JSONArray list) {
    	Coordinate coords[] = new Coordinate[list.size()];
    	for(int i=0; i<list.size(); i++) {
    		JSONArray d = list.getJSONArray(i);
    		coords[i] = new Coordinate(d.getDoubleValue(0), d.getDoubleValue(1));
    	}
    	LineString line = geometryFactory.createLineString(coords);
		return line;
	}
    
	public static void main(String[] args) throws ParseException {
//		Polygon circle = createCircle(116.217516,39.906932, 5000);
//		System.out.println(circle.toText());
//		Geometry buffer = circle.buffer(0.0010);
//		System.out.println(buffer);
		//Coordinate coord = new Coordinate(Double.parseDouble("120.10860868343929"), Double.parseDouble("32.28195041706498"));
//		Coordinate coord = new Coordinate(Double.parseDouble("116.21478184343158"), Double.parseDouble("39.89950153119423"));
//		GeometryFactory geoFac = new GeometryFactory();
//		Point point = geoFac.createPoint(coord);
//		System.out.println(point.within(buffer));
//		boolean b1 = withinGeo(116.2615687203913,39.91367337522363, circle.toText());
//		System.out.println(b1);
		
//		Polygon rect = createRectangle(116.217516,39.906932, 5000);
//		System.out.println(rect.toText());
//		boolean b2 = withinGeo(116.26244176420597,39.90694199999998, rect.toText());
//		System.out.println(b2);
		
		String text = "[[116.28376,39.818295],[116.28376,39.818306],[116.283783,39.818329],[116.28405,39.818329],[116.284309,39.818329],[116.284309,39.818329],[116.284309,39.817688],[116.284294,39.817303],[116.284294,39.817032],[116.284286,39.816692],[116.284264,39.816288],[116.284264,39.816288],[116.284584,39.816303],[116.28495,39.816311],[116.285919,39.816326],[116.286934,39.816334],[116.287201,39.816334],[116.288116,39.816383],[116.288383,39.816391],[116.28846,39.816395],[116.289513,39.816452],[116.290207,39.81649],[116.290298,39.816502],[116.290398,39.815025],[116.290421,39.814846],[116.290474,39.814453],[116.290497,39.814285],[116.290558,39.814056],[116.290649,39.813808],[116.29097,39.812977],[116.291199,39.812389],[116.291565,39.811512],[116.292229,39.809895],[116.292542,39.809097],[116.292633,39.80891],[116.292862,39.808548],[116.292908,39.808491],[116.29319,39.808102],[116.293251,39.808044],[116.29409,39.807091],[116.294281,39.806885],[116.294418,39.806774],[116.294533,39.806702],[116.294647,39.806648],[116.294861,39.806587],[116.295113,39.806561],[116.29583,39.806599],[116.297218,39.806702],[116.298805,39.806805],[116.299637,39.806866],[116.300072,39.806919],[116.300072,39.806919],[116.300171,39.806641],[116.300293,39.806278],[116.300468,39.805763],[116.30101,39.804214],[116.301102,39.803963],[116.30127,39.80349],[116.301277,39.803463],[116.30162,39.802505],[116.30162,39.802505],[116.302589,39.799747],[116.303177,39.798054],[116.30323,39.797874],[116.303299,39.797688],[116.303413,39.797359],[116.303535,39.796978],[116.304184,39.795139],[116.304321,39.79475],[116.304375,39.794613],[116.304451,39.794369],[116.304695,39.793552],[116.304863,39.792984],[116.304993,39.79248],[116.305138,39.791901],[116.305191,39.791702],[116.30529,39.791397],[116.305389,39.791039],[116.305565,39.79039],[116.305748,39.789684],[116.305817,39.789452],[116.305878,39.789196],[116.306427,39.78727],[116.306602,39.786777],[116.306755,39.78624],[116.307007,39.785259],[116.307083,39.78487],[116.307175,39.784519],[116.307564,39.78236],[116.307594,39.782207],[116.307709,39.781559],[116.307869,39.781563],[116.308632,39.781551],[116.308632,39.781551],[116.309547,39.781517],[116.30999,39.781517],[116.310677,39.781528],[116.31105,39.78159],[116.311935,39.781494],[116.316101,39.780991],[116.316231,39.780972],[116.316483,39.780945],[116.317268,39.780842],[116.320663,39.780449],[116.321068,39.780403],[116.321709,39.780331],[116.32222,39.78027],[116.323112,39.780163],[116.323242,39.780151],[116.32399,39.780064],[116.325882,39.779835],[116.327774,39.77961],[116.328819,39.779499],[116.330544,39.779343],[116.331367,39.779274],[116.335411,39.779041],[116.336853,39.778961],[116.338562,39.778858],[116.341972,39.778641],[116.342194,39.778629],[116.345207,39.778481],[116.346169,39.778435],[116.34758,39.778366],[116.348808,39.778305],[116.359138,39.777752],[116.360283,39.777687],[116.362663,39.777561],[116.363892,39.777493],[116.365448,39.777378],[116.366348,39.777264],[116.367012,39.777176],[116.367188,39.777138],[116.367233,39.77713],[116.367859,39.776997],[116.368439,39.776836],[116.369064,39.776619],[116.369537,39.776417],[116.370033,39.77615],[116.370522,39.77589],[116.37088,39.775658],[116.371201,39.775421],[116.371719,39.774975],[116.372017,39.774681],[116.372398,39.774212],[116.372726,39.773739],[116.372894,39.773449],[116.3731,39.773048],[116.373428,39.772243],[116.373581,39.771786],[116.373726,39.77124],[116.373894,39.770508],[116.374046,39.769844],[116.374397,39.768242],[116.374451,39.767952],[116.374924,39.765751],[116.375435,39.763439],[116.375565,39.762901],[116.37571,39.762466],[116.375877,39.761982],[116.376015,39.761631],[116.376266,39.761143],[116.376572,39.760677],[116.376907,39.76025],[116.377144,39.759991],[116.377403,39.759747],[116.377678,39.759521],[116.377724,39.759487],[116.378143,39.75919],[116.378761,39.758835],[116.379158,39.758659],[116.379539,39.758507],[116.38018,39.758293],[116.380486,39.758217],[116.381203,39.758083],[116.38166,39.758034],[116.382309,39.757992],[116.382874,39.757992],[116.383286,39.758022],[116.384178,39.758121],[116.385033,39.758259],[116.386452,39.758568],[116.389153,39.759212],[116.390442,39.759521],[116.391159,39.759689],[116.392616,39.760021],[116.397972,39.761292],[116.399841,39.76173],[116.403519,39.762592],[116.40519,39.762985],[116.405701,39.763103],[116.407516,39.763535],[116.409798,39.764076],[116.410233,39.764187],[116.411125,39.764404],[116.411369,39.764465],[116.412125,39.764668],[116.413467,39.765072],[116.414436,39.7654],[116.416328,39.766205],[116.41671,39.766392],[116.417183,39.766613],[116.417984,39.767086],[116.418152,39.767193],[116.419029,39.767796],[116.419342,39.768028],[116.41983,39.768425],[116.420403,39.768932],[116.42099,39.769539],[116.421547,39.770161],[116.421814,39.770508],[116.421837,39.770538],[116.422096,39.770885],[116.422638,39.771717],[116.423103,39.772541],[116.423325,39.772968],[116.423759,39.773869],[116.424065,39.774586],[116.424423,39.775478],[116.425102,39.777195],[116.425423,39.778004],[116.425995,39.779366],[116.426193,39.779819],[116.426537,39.780514],[116.427055,39.781494],[116.427101,39.781574],[116.42749,39.782272],[116.428055,39.783134],[116.428345,39.783546],[116.428841,39.784187],[116.429077,39.784462],[116.429466,39.784916],[116.429573,39.785027],[116.430199,39.785664],[116.430534,39.785976],[116.431084,39.786446],[116.431465,39.786747],[116.432152,39.787251],[116.432922,39.787754],[116.433105,39.787868],[116.433342,39.78801],[116.433815,39.78828],[116.434425,39.788597],[116.434853,39.788792],[116.435463,39.78907],[116.436096,39.78933],[116.436508,39.789486],[116.437202,39.789726],[116.43795,39.789948],[116.438957,39.790199],[116.439735,39.790363],[116.440651,39.790527],[116.441597,39.790661],[116.443207,39.790825],[116.444435,39.790894],[116.445831,39.790939],[116.446953,39.790939],[116.447495,39.790928],[116.449722,39.790871],[116.453041,39.790756],[116.454544,39.790733],[116.455078,39.79073],[116.455185,39.79073],[116.455734,39.790745],[116.456947,39.79084],[116.457947,39.790981],[116.458847,39.791168],[116.459869,39.791451],[116.460747,39.791775],[116.461548,39.792103],[116.462044,39.792339],[116.462296,39.79248],[116.462593,39.792645],[116.463066,39.792938],[116.463921,39.793533],[116.464584,39.794067],[116.464996,39.794456],[116.465797,39.795235],[116.467499,39.797005],[116.468719,39.798294],[116.470016,39.799656],[116.47261,39.802395],[116.473091,39.802872],[116.473648,39.803463],[116.474297,39.804142],[116.476418,39.806377],[116.477051,39.807045],[116.477074,39.807079],[116.478279,39.808338],[116.479065,39.809101],[116.479263,39.809277],[116.479912,39.809799],[116.480453,39.810188],[116.481155,39.810631],[116.48185,39.811024],[116.482445,39.811321],[116.483192,39.811646],[116.484604,39.812191],[116.487175,39.813126],[116.490784,39.814453],[116.491806,39.814827],[116.494377,39.815777],[116.494827,39.815948],[116.4953,39.816116],[116.497742,39.817001],[116.499023,39.817471],[116.499992,39.817825],[116.502922,39.81889],[116.503571,39.819118],[116.504105,39.819321],[116.505547,39.819847],[116.505989,39.820007],[116.50621,39.820099],[116.506828,39.820324],[116.50798,39.820763],[116.508522,39.820969],[116.509155,39.821194],[116.509552,39.821339],[116.510086,39.821537],[116.51133,39.822014],[116.511688,39.82217],[116.512703,39.822674],[116.513069,39.822876],[116.513763,39.823288],[116.514107,39.823528],[116.514648,39.823902],[116.51593,39.824844],[116.516708,39.825439],[116.516815,39.825512],[116.517082,39.825714],[116.520103,39.827969],[116.520996,39.828629],[116.522514,39.829769],[116.523888,39.830776],[116.524605,39.831284],[116.525177,39.831738],[116.527473,39.833466],[116.528923,39.834518],[116.529617,39.83503],[116.531487,39.836422],[116.532211,39.836983],[116.538483,39.84166],[116.538651,39.841774],[116.538811,39.841896],[116.540924,39.843483],[116.541206,39.843697],[116.542412,39.844585],[116.542969,39.845013],[116.544205,39.845928],[116.545593,39.846977],[116.546135,39.847408],[116.546318,39.847561],[116.546913,39.848103],[116.547432,39.848587],[116.547928,39.849163],[116.548309,39.849693],[116.5485,39.849979],[116.548859,39.850636],[116.549088,39.851082],[116.549194,39.851368],[116.549431,39.852135],[116.549553,39.852745],[116.549622,39.853203],[116.549652,39.853767],[116.549644,39.854408],[116.5495,39.855896],[116.549049,39.858398],[116.548744,39.860043],[116.548447,39.861546],[116.548241,39.862888],[116.548157,39.863537],[116.548134,39.864185],[116.548119,39.86488],[116.548134,39.865601],[116.548241,39.867004],[116.548523,39.869381],[116.548546,39.869453],[116.548607,39.870079],[116.548729,39.871208],[116.548775,39.871708],[116.548851,39.872849],[116.548904,39.873959],[116.548912,39.874161],[116.548927,39.874371],[116.548935,39.875347],[116.548904,39.877548],[116.548874,39.880367],[116.548874,39.880726],[116.548836,39.881916],[116.548775,39.883057],[116.548683,39.884075],[116.548576,39.885014],[116.548553,39.885204],[116.548508,39.885601],[116.548508,39.885601],[116.548393,39.886513],[116.548119,39.88858],[116.547981,39.889717],[116.547813,39.891079],[116.547775,39.891357],[116.547638,39.892483],[116.547577,39.892845],[116.547531,39.893093],[116.547371,39.894051],[116.547058,39.895622],[116.546791,39.896915],[116.546616,39.897846],[116.545708,39.902344],[116.545158,39.90509],[116.545059,39.90554],[116.545059,39.90554],[116.54512,39.905849],[116.54512,39.90593],[116.545105,39.906166],[116.54512,39.906532],[116.545166,39.90675],[116.545265,39.907055],[116.545341,39.907192],[116.545387,39.90731],[116.545479,39.90744],[116.545662,39.907677],[116.545822,39.907864],[116.545967,39.907986],[116.546112,39.908119],[116.546295,39.908241],[116.54673,39.908535],[116.547241,39.90871],[116.547592,39.908791],[116.547737,39.908825],[116.547859,39.90884],[116.548187,39.908863],[116.549309,39.90892],[116.54969,39.909004],[116.550095,39.909004],[116.553436,39.909008],[116.559639,39.909111],[116.564728,39.909222],[116.564941,39.909222],[116.566948,39.909241],[116.569504,39.909294],[116.57074,39.909359],[116.57074,39.909359],[116.571106,39.909309],[116.571892,39.909374],[116.571892,39.909374],[116.57267,39.909389],[116.573166,39.909462],[116.573883,39.909557],[116.574341,39.909615],[116.575768,39.90979],[116.576714,39.909889],[116.576675,39.910484],[116.576622,39.911137],[116.576584,39.911556],[116.576508,39.912529],[116.576424,39.91333],[116.576416,39.913559],[116.576424,39.913654],[116.5765,39.913837],[116.576622,39.914112],[116.576683,39.914288],[116.576805,39.914577],[116.576942,39.914818],[116.57753,39.91618],[116.577675,39.916515],[116.577759,39.916767],[116.577881,39.917343],[116.577972,39.917789],[116.577988,39.917877],[116.578011,39.917957],[116.578171,39.918812],[116.578255,39.919292],[116.57827,39.919346],[116.57827,39.919346],[116.5783,39.919411],[116.5784,39.919472],[116.578468,39.919487],[116.578835,39.919514],[116.579674,39.919563],[116.580696,39.919636],[116.581039,39.919659],[116.581261,39.91967],[116.582497,39.919765],[116.583038,39.919815],[116.583252,39.919792],[116.583336,39.919804],[116.583282,39.919968],[116.583252,39.920174],[116.583153,39.922176],[116.583145,39.922409],[116.58313,39.922676],[116.583115,39.923012],[116.583099,39.923492],[116.583092,39.923748],[116.583076,39.923977],[116.583061,39.924316],[116.583046,39.924431],[116.583038,39.924541],[116.583328,39.924564],[116.586914,39.924877],[116.589745,39.925106],[116.590134,39.925137],[116.59021,39.925045],[116.592934,39.925186],[116.594124,39.925236]]";
		JSONArray arr = JSONArray.parseArray(text);
		LineString lineString = createLingString(arr);
		Geometry buffer = lineString.buffer(0.0010);
		System.out.println(buffer);
		boolean b3 = withinGeo(116.28376,39.858306, buffer.toText());
		System.out.println(b3);
		
		
	}
 

	
}
